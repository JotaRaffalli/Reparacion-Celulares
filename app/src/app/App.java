/*
 * 
 * Reparacion de celulares
 *
 * Creado por Ricardo Rodriguez <ricardo96r@gmail.com>
 */

package app;

import app.paises.PaisNodoABB;
import app.paises.PaisesABB;
import app.sucursales.Cliente;
import app.sucursales.ClientesListaSimple;
import app.sucursales.ClienteNodoSimple;
import app.sucursales.ClientesCola;
import app.sucursales.InformacionListaSimple;
import app.sucursales.InformacionNodoSimple;
import app.sucursales.SucursalListaSimple;
import app.sucursales.SucursalNodoSimple;
import app.sucursales.Tecnico;
import app.sucursales.TecnicoListaSimple;
import app.sucursales.TecnicoNodoSimple;
import com.alee.laf.WebLookAndFeel;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Ricardo
 */
public class App extends javax.swing.JFrame {

    private PaisNodoABB raiz = null;
    private PaisesABB paises = new PaisesABB(raiz);
    
    /**
     * Creates new form App
     */
    public App() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane6 = new javax.swing.JScrollPane();
        listaSucursales3 = new javax.swing.JList();
        jPanel26 = new javax.swing.JPanel();
        jLabel44 = new javax.swing.JLabel();
        jScrollPane15 = new javax.swing.JScrollPane();
        jTable9 = new javax.swing.JTable();
        jPanel18 = new javax.swing.JPanel();
        jLabel16 = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        jTable3 = new javax.swing.JTable();
        jPanel14 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        jTabbedPane4 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane8 = new javax.swing.JScrollPane();
        tablaPaises = new javax.swing.JTable();
        jPanel3 = new javax.swing.JPanel();
        nombrePais = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        agregarPais = new javax.swing.JButton();
        jLabel10 = new javax.swing.JLabel();
        jPanel9 = new javax.swing.JPanel();
        nombrePaisSeleccionado1 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        eliminarPais = new javax.swing.JButton();
        eliminarPaisLabel = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        paisLabel1 = new javax.swing.JLabel();
        jPanel7 = new javax.swing.JPanel();
        jTabbedPane5 = new javax.swing.JTabbedPane();
        jPanel5 = new javax.swing.JPanel();
        jScrollPane9 = new javax.swing.JScrollPane();
        tablaSucursales = new javax.swing.JTable();
        jPanel6 = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        nombrePaisSeleccionado = new javax.swing.JLabel();
        errorSucursal = new javax.swing.JLabel();
        jTabbedPane2 = new javax.swing.JTabbedPane();
        jPanel2 = new javax.swing.JPanel();
        jLabel13 = new javax.swing.JLabel();
        nombreSucursal = new javax.swing.JTextField();
        jLabel14 = new javax.swing.JLabel();
        encargado = new javax.swing.JTextField();
        jPanel25 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jPanel23 = new javax.swing.JPanel();
        jLabel24 = new javax.swing.JLabel();
        huaweiNombre = new javax.swing.JTextField();
        jLabel26 = new javax.swing.JLabel();
        lgNombre = new javax.swing.JTextField();
        jLabel27 = new javax.swing.JLabel();
        iphoneNombre = new javax.swing.JTextField();
        jLabel30 = new javax.swing.JLabel();
        otrosNombre = new javax.swing.JTextField();
        jPanel27 = new javax.swing.JPanel();
        jLabel25 = new javax.swing.JLabel();
        samsungNombre = new javax.swing.JTextField();
        jLabel28 = new javax.swing.JLabel();
        nokiaNombre = new javax.swing.JTextField();
        jLabel29 = new javax.swing.JLabel();
        motorolaNombre = new javax.swing.JTextField();
        jLabel17 = new javax.swing.JLabel();
        jPanel22 = new javax.swing.JPanel();
        agregarSucursal = new javax.swing.JButton();
        errorS = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        sucursalLabel = new javax.swing.JLabel();
        jPanel17 = new javax.swing.JPanel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel19 = new javax.swing.JPanel();
        jPanel15 = new javax.swing.JPanel();
        jLabel7 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tablaClientes = new javax.swing.JTable();
        jPanel16 = new javax.swing.JPanel();
        jLabel12 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tablaTecnicos = new javax.swing.JTable();
        jPanel20 = new javax.swing.JPanel();
        jLabel18 = new javax.swing.JLabel();
        jScrollPane7 = new javax.swing.JScrollPane();
        tablaCola = new javax.swing.JTable();
        jPanel8 = new javax.swing.JPanel();
        jPanel11 = new javax.swing.JPanel();
        jLabel19 = new javax.swing.JLabel();
        jPanel12 = new javax.swing.JPanel();
        jLabel8 = new javax.swing.JLabel();
        nombreCliente = new javax.swing.JTextField();
        jLabel20 = new javax.swing.JLabel();
        contactoCliente = new javax.swing.JTextField();
        jPanel24 = new javax.swing.JPanel();
        jLabel33 = new javax.swing.JLabel();
        cedulaCliente = new javax.swing.JTextField();
        jLabel34 = new javax.swing.JLabel();
        marcaCliente = new javax.swing.JComboBox();
        agregarCliente = new javax.swing.JButton();
        jPanel28 = new javax.swing.JPanel();
        jLabel37 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        problemaCliente = new javax.swing.JTextArea();
        errorCliente = new javax.swing.JLabel();
        agregarClienteDatosLabel = new javax.swing.JLabel();
        jPanel13 = new javax.swing.JPanel();
        jScrollPane5 = new javax.swing.JScrollPane();
        tablaInfo = new javax.swing.JTable();
        jLabel21 = new javax.swing.JLabel();
        paisSucursalLabel = new javax.swing.JLabel();
        tecnicoLabel = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        cargarDatos = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        jSeparator2 = new javax.swing.JPopupMenu.Separator();
        nuevoArchivo = new javax.swing.JMenuItem();

        listaSucursales3.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        jScrollPane6.setViewportView(listaSucursales3);

        jLabel44.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel44.setText("TÃ©cnicos");

        jTable9.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "id", "nombre", "telefono", "cedula", "tecnico", "asignado", "ingreso", "entrega", "entregado"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane15.setViewportView(jTable9);

        javax.swing.GroupLayout jPanel26Layout = new javax.swing.GroupLayout(jPanel26);
        jPanel26.setLayout(jPanel26Layout);
        jPanel26Layout.setHorizontalGroup(
            jPanel26Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel26Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel26Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel26Layout.createSequentialGroup()
                        .addComponent(jLabel44)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jScrollPane15, javax.swing.GroupLayout.DEFAULT_SIZE, 518, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel26Layout.setVerticalGroup(
            jPanel26Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel26Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel44)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane15, javax.swing.GroupLayout.DEFAULT_SIZE, 137, Short.MAX_VALUE)
                .addContainerGap())
        );

        jLabel16.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel16.setText("TÃ©cnicos");

        jTable3.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "id", "contacto", "cedula", "tecnico", "asignado", "ingreso", "entrega", "entregado"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.String.class, java.lang.Boolean.class, java.lang.String.class, java.lang.String.class, java.lang.Boolean.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, true, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane4.setViewportView(jTable3);

        javax.swing.GroupLayout jPanel18Layout = new javax.swing.GroupLayout(jPanel18);
        jPanel18.setLayout(jPanel18Layout);
        jPanel18Layout.setHorizontalGroup(
            jPanel18Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel18Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel18Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel18Layout.createSequentialGroup()
                        .addComponent(jLabel16)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 518, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel18Layout.setVerticalGroup(
            jPanel18Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel18Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel16, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(255, 255, 255));

        tablaPaises.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "id", "pais"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tablaPaises.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tablaPaisesMouseClicked(evt);
            }
        });
        jScrollPane8.setViewportView(tablaPaises);
        if (tablaPaises.getColumnModel().getColumnCount() > 0) {
            tablaPaises.getColumnModel().getColumn(0).setResizable(false);
            tablaPaises.getColumnModel().getColumn(1).setResizable(false);
        }

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane8, javax.swing.GroupLayout.DEFAULT_SIZE, 178, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane8, javax.swing.GroupLayout.DEFAULT_SIZE, 502, Short.MAX_VALUE)
                .addContainerGap())
        );

        jTabbedPane4.addTab("Paises", jPanel1);

        jLabel3.setText("Nombre del pais");

        agregarPais.setText("Agregar paÃ­s");
        agregarPais.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                agregarPaisActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(nombrePais)
                    .addComponent(agregarPais, javax.swing.GroupLayout.DEFAULT_SIZE, 178, Short.MAX_VALUE)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3)
                            .addComponent(jLabel10))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(nombrePais, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(agregarPais)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel10)
                .addContainerGap(438, Short.MAX_VALUE))
        );

        jTabbedPane4.addTab("Agregar pais", jPanel3);

        nombrePaisSeleccionado1.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        nombrePaisSeleccionado1.setText("No hay pais seleccionado!");

        jLabel11.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel11.setText("PaÃ­s:");

        eliminarPais.setBackground(new java.awt.Color(255, 51, 51));
        eliminarPais.setForeground(new java.awt.Color(255, 51, 51));
        eliminarPais.setText("Eliminar pais");
        eliminarPais.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                eliminarPaisActionPerformed(evt);
            }
        });

        eliminarPaisLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        javax.swing.GroupLayout jPanel9Layout = new javax.swing.GroupLayout(jPanel9);
        jPanel9.setLayout(jPanel9Layout);
        jPanel9Layout.setHorizontalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(eliminarPais, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel9Layout.createSequentialGroup()
                        .addComponent(jLabel11)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 11, Short.MAX_VALUE)
                        .addComponent(nombrePaisSeleccionado1))
                    .addComponent(eliminarPaisLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel9Layout.setVerticalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(nombrePaisSeleccionado1)
                    .addComponent(jLabel11))
                .addGap(18, 18, 18)
                .addComponent(eliminarPais)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(eliminarPaisLabel)
                .addContainerGap(444, Short.MAX_VALUE))
        );

        jTabbedPane4.addTab("Eliminar paÃ­s", jPanel9);

        jLabel9.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel9.setText("PaÃ­ses");

        paisLabel1.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        paisLabel1.setText("No hay paÃ­s seleccionado");

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jTabbedPane4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(paisLabel1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel4Layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(jLabel9)
                    .addContainerGap(145, Short.MAX_VALUE)))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(37, 37, 37)
                .addComponent(paisLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTabbedPane4))
            .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel4Layout.createSequentialGroup()
                    .addGap(10, 10, 10)
                    .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(585, Short.MAX_VALUE)))
        );

        tablaSucursales.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "id", "nombre", "gerente"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tablaSucursales.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tablaSucursalesMouseClicked(evt);
            }
        });
        jScrollPane9.setViewportView(tablaSucursales);
        if (tablaSucursales.getColumnModel().getColumnCount() > 0) {
            tablaSucursales.getColumnModel().getColumn(0).setHeaderValue("id");
            tablaSucursales.getColumnModel().getColumn(1).setHeaderValue("nombre");
            tablaSucursales.getColumnModel().getColumn(2).setHeaderValue("gerente");
        }

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane9, javax.swing.GroupLayout.DEFAULT_SIZE, 243, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane9, javax.swing.GroupLayout.DEFAULT_SIZE, 500, Short.MAX_VALUE)
                .addContainerGap())
        );

        jTabbedPane5.addTab("Sucursales", jPanel5);

        jLabel6.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel6.setText("PaÃ­s:");

        nombrePaisSeleccionado.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        nombrePaisSeleccionado.setText("No hay pais seleccionado!");

        jLabel13.setText("Nombre de la sucursal");

        jLabel14.setText("Gerente encargado");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(nombreSucursal)
                    .addComponent(encargado)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel13)
                            .addComponent(jLabel14))
                        .addGap(0, 113, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel13)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(nombreSucursal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel14)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(encargado, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(155, Short.MAX_VALUE))
        );

        jTabbedPane2.addTab("Datos de la sucursal", jPanel2);

        jLabel24.setText("Huawei");

        jLabel26.setText("LG");

        jLabel27.setText("iPhone");

        jLabel30.setText("Otros");

        javax.swing.GroupLayout jPanel23Layout = new javax.swing.GroupLayout(jPanel23);
        jPanel23.setLayout(jPanel23Layout);
        jPanel23Layout.setHorizontalGroup(
            jPanel23Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel23Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel23Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(huaweiNombre)
                    .addComponent(lgNombre, javax.swing.GroupLayout.DEFAULT_SIZE, 95, Short.MAX_VALUE)
                    .addComponent(iphoneNombre, javax.swing.GroupLayout.DEFAULT_SIZE, 95, Short.MAX_VALUE)
                    .addGroup(jPanel23Layout.createSequentialGroup()
                        .addGroup(jPanel23Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel24)
                            .addComponent(jLabel26)
                            .addComponent(jLabel27)
                            .addComponent(jLabel30))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(otrosNombre))
                .addContainerGap())
        );
        jPanel23Layout.setVerticalGroup(
            jPanel23Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel23Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel24)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(huaweiNombre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel26)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lgNombre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel27)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(iphoneNombre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel30)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(otrosNombre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(15, Short.MAX_VALUE))
        );

        jLabel25.setText("Samsung");

        jLabel28.setText("Nokia");

        jLabel29.setText("Motorola");

        javax.swing.GroupLayout jPanel27Layout = new javax.swing.GroupLayout(jPanel27);
        jPanel27.setLayout(jPanel27Layout);
        jPanel27Layout.setHorizontalGroup(
            jPanel27Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(samsungNombre)
            .addComponent(nokiaNombre)
            .addGroup(jPanel27Layout.createSequentialGroup()
                .addGroup(jPanel27Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel25)
                    .addComponent(jLabel28))
                .addGap(0, 0, Short.MAX_VALUE))
            .addComponent(jLabel29, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(motorolaNombre)
        );
        jPanel27Layout.setVerticalGroup(
            jPanel27Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel27Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel25)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(samsungNombre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel28)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(nokiaNombre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel29)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(motorolaNombre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jLabel17.setText("Agregar los nombres de cada tecnico");

        javax.swing.GroupLayout jPanel25Layout = new javax.swing.GroupLayout(jPanel25);
        jPanel25.setLayout(jPanel25Layout);
        jPanel25Layout.setHorizontalGroup(
            jPanel25Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel25Layout.createSequentialGroup()
                .addComponent(jPanel23, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel27, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(jPanel25Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel17)
                .addContainerGap(51, Short.MAX_VALUE))
        );
        jPanel25Layout.setVerticalGroup(
            jPanel25Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel25Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel17)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel25Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel23, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel27, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel1)
                .addContainerGap())
        );

        jTabbedPane2.addTab("Tecnicos", jPanel25);

        agregarSucursal.setText("Agregar sucursal");
        agregarSucursal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                agregarSucursalActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel22Layout = new javax.swing.GroupLayout(jPanel22);
        jPanel22.setLayout(jPanel22Layout);
        jPanel22Layout.setHorizontalGroup(
            jPanel22Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(agregarSucursal, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jPanel22Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(errorS, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel22Layout.setVerticalGroup(
            jPanel22Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel22Layout.createSequentialGroup()
                .addComponent(agregarSucursal)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(errorS)
                .addContainerGap())
        );

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel22, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jTabbedPane2)
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addComponent(jLabel6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(nombrePaisSeleccionado, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addGap(104, 104, 104)
                        .addComponent(errorSucursal, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(nombrePaisSeleccionado))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTabbedPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 280, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel22, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(errorSucursal)
                .addContainerGap(153, Short.MAX_VALUE))
        );

        jTabbedPane5.addTab("Agregar Sucursal", jPanel6);

        jLabel15.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel15.setText("Sucursales");

        sucursalLabel.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        sucursalLabel.setText("No hay sucursal seleccionada");
        sucursalLabel.setToolTipText("");

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addComponent(jTabbedPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 268, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel15)
                    .addComponent(sucursalLabel))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel15, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(sucursalLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTabbedPane5))
        );

        jLabel7.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel7.setText("Clientes por atender");

        tablaClientes.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "id", "nombre", "contacto", "cedula", "problema", "ingreso", "entrega"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tablaClientes);

        javax.swing.GroupLayout jPanel15Layout = new javax.swing.GroupLayout(jPanel15);
        jPanel15.setLayout(jPanel15Layout);
        jPanel15Layout.setHorizontalGroup(
            jPanel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel15Layout.createSequentialGroup()
                .addComponent(jLabel7)
                .addGap(0, 390, Short.MAX_VALUE))
            .addComponent(jScrollPane1)
        );
        jPanel15Layout.setVerticalGroup(
            jPanel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel15Layout.createSequentialGroup()
                .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 126, Short.MAX_VALUE)
                .addContainerGap())
        );

        jLabel12.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel12.setText("TÃ©cnicos");

        tablaTecnicos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "id", "nombre", "tipo"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tablaTecnicos.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tablaTecnicosMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(tablaTecnicos);

        javax.swing.GroupLayout jPanel16Layout = new javax.swing.GroupLayout(jPanel16);
        jPanel16.setLayout(jPanel16Layout);
        jPanel16Layout.setHorizontalGroup(
            jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel16Layout.createSequentialGroup()
                .addComponent(jLabel12)
                .addGap(0, 480, Short.MAX_VALUE))
            .addComponent(jScrollPane2)
        );
        jPanel16Layout.setVerticalGroup(
            jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel16Layout.createSequentialGroup()
                .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 126, Short.MAX_VALUE)
                .addContainerGap())
        );

        jLabel18.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel18.setText("Cola de clientes");

        tablaCola.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "id", "nombre", "contacto", "cedula", "problema", "ingreso", "entrega"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane7.setViewportView(tablaCola);

        javax.swing.GroupLayout jPanel20Layout = new javax.swing.GroupLayout(jPanel20);
        jPanel20.setLayout(jPanel20Layout);
        jPanel20Layout.setHorizontalGroup(
            jPanel20Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel20Layout.createSequentialGroup()
                .addComponent(jLabel18)
                .addGap(0, 425, Short.MAX_VALUE))
            .addComponent(jScrollPane7, javax.swing.GroupLayout.DEFAULT_SIZE, 548, Short.MAX_VALUE)
        );
        jPanel20Layout.setVerticalGroup(
            jPanel20Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel20Layout.createSequentialGroup()
                .addComponent(jLabel18, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane7, javax.swing.GroupLayout.DEFAULT_SIZE, 128, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel19Layout = new javax.swing.GroupLayout(jPanel19);
        jPanel19.setLayout(jPanel19Layout);
        jPanel19Layout.setHorizontalGroup(
            jPanel19Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel19Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel19Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel15, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel20, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel16, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel19Layout.setVerticalGroup(
            jPanel19Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel19Layout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addComponent(jPanel16, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel15, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel20, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        jTabbedPane1.addTab("Tecnicos", jPanel19);

        jLabel19.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel19.setText("Agregar cliente");

        jLabel8.setText("Nombre del cliente");

        nombreCliente.setHorizontalAlignment(javax.swing.JTextField.LEFT);

        jLabel20.setText("Telefono de contacto");

        javax.swing.GroupLayout jPanel12Layout = new javax.swing.GroupLayout(jPanel12);
        jPanel12.setLayout(jPanel12Layout);
        jPanel12Layout.setHorizontalGroup(
            jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(nombreCliente)
            .addComponent(jLabel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jPanel12Layout.createSequentialGroup()
                .addComponent(jLabel20)
                .addGap(0, 58, Short.MAX_VALUE))
            .addComponent(contactoCliente)
        );
        jPanel12Layout.setVerticalGroup(
            jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel12Layout.createSequentialGroup()
                .addComponent(jLabel8)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(nombreCliente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel20)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(contactoCliente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        jLabel33.setText("Cedula");

        jLabel34.setText("Marca del telefono");

        marcaCliente.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Huawei", "Samsung", "LG", "iPhone", "Nokia", "Motorola", "Otros" }));
        marcaCliente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                marcaClienteActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel24Layout = new javax.swing.GroupLayout(jPanel24);
        jPanel24.setLayout(jPanel24Layout);
        jPanel24Layout.setHorizontalGroup(
            jPanel24Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel34, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jPanel24Layout.createSequentialGroup()
                .addComponent(jLabel33)
                .addGap(129, 129, 129))
            .addGroup(jPanel24Layout.createSequentialGroup()
                .addGroup(jPanel24Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(cedulaCliente)
                    .addComponent(marcaCliente, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(4, 4, 4))
        );
        jPanel24Layout.setVerticalGroup(
            jPanel24Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel24Layout.createSequentialGroup()
                .addComponent(jLabel33)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cedulaCliente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel34)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(marcaCliente, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        agregarCliente.setText("Agregar cliente");
        agregarCliente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                agregarClienteActionPerformed(evt);
            }
        });

        jLabel37.setText("Problema presentado");

        problemaCliente.setColumns(20);
        problemaCliente.setRows(5);
        jScrollPane3.setViewportView(problemaCliente);

        javax.swing.GroupLayout jPanel28Layout = new javax.swing.GroupLayout(jPanel28);
        jPanel28.setLayout(jPanel28Layout);
        jPanel28Layout.setHorizontalGroup(
            jPanel28Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel28Layout.createSequentialGroup()
                .addComponent(jLabel37)
                .addGap(0, 0, Short.MAX_VALUE))
            .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 214, Short.MAX_VALUE)
        );
        jPanel28Layout.setVerticalGroup(
            jPanel28Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel28Layout.createSequentialGroup()
                .addComponent(jLabel37)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
        );

        errorCliente.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        agregarClienteDatosLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        javax.swing.GroupLayout jPanel11Layout = new javax.swing.GroupLayout(jPanel11);
        jPanel11.setLayout(jPanel11Layout);
        jPanel11Layout.setHorizontalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel11Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(agregarCliente, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel11Layout.createSequentialGroup()
                        .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(agregarClienteDatosLabel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(errorCliente, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel11Layout.createSequentialGroup()
                                .addComponent(jLabel19)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel11Layout.createSequentialGroup()
                                .addComponent(jPanel12, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jPanel24, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jPanel28, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addContainerGap())))
        );
        jPanel11Layout.setVerticalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel11Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel19, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel12, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel24, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel28, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(agregarCliente, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(30, 30, 30)
                .addComponent(errorCliente)
                .addGap(66, 66, 66)
                .addComponent(agregarClienteDatosLabel)
                .addContainerGap(243, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel11, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel11, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        jTabbedPane1.addTab("Agregar cliente", jPanel8);

        tablaInfo.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "IdTecnico", "IdCliente", "nombre", "contacto", "cedula", "asignado", "ingreso", "entrega", "entregado", "problema"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.Boolean.class, java.lang.String.class, java.lang.String.class, java.lang.Boolean.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane5.setViewportView(tablaInfo);

        javax.swing.GroupLayout jPanel13Layout = new javax.swing.GroupLayout(jPanel13);
        jPanel13.setLayout(jPanel13Layout);
        jPanel13Layout.setHorizontalGroup(
            jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel13Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 548, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel13Layout.setVerticalGroup(
            jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel13Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 499, Short.MAX_VALUE)
                .addContainerGap())
        );

        jTabbedPane1.addTab("Informacion de sucursal", jPanel13);

        jLabel21.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel21.setText("InformaciÃ³n de la sucursal");

        paisSucursalLabel.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        paisSucursalLabel.setText("No hay Pais/Sucursal seleccionado");

        tecnicoLabel.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        tecnicoLabel.setText("No hay tÃ©cnico seleccionado");

        javax.swing.GroupLayout jPanel17Layout = new javax.swing.GroupLayout(jPanel17);
        jPanel17.setLayout(jPanel17Layout);
        jPanel17Layout.setHorizontalGroup(
            jPanel17Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel17Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel17Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel17Layout.createSequentialGroup()
                        .addComponent(jLabel21)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(paisSucursalLabel))
                    .addGroup(jPanel17Layout.createSequentialGroup()
                        .addComponent(tecnicoLabel)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
            .addComponent(jTabbedPane1, javax.swing.GroupLayout.Alignment.TRAILING)
        );
        jPanel17Layout.setVerticalGroup(
            jPanel17Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel17Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel17Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel21, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(paisSucursalLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(tecnicoLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTabbedPane1))
        );

        javax.swing.GroupLayout jPanel14Layout = new javax.swing.GroupLayout(jPanel14);
        jPanel14.setLayout(jPanel14Layout);
        jPanel14Layout.setHorizontalGroup(
            jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel14Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel17, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel14Layout.setVerticalGroup(
            jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel4, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel17, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        jMenu1.setText("Iniciar");

        cargarDatos.setText("Cargar datos de un archivo de guardado");
        cargarDatos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cargarDatosActionPerformed(evt);
            }
        });
        jMenu1.add(cargarDatos);
        jMenu1.add(jSeparator1);
        jMenu1.add(jSeparator2);

        nuevoArchivo.setBackground(new java.awt.Color(255, 51, 51));
        nuevoArchivo.setForeground(new java.awt.Color(255, 51, 51));
        nuevoArchivo.setText("Nuevo archivo de guardado");
        nuevoArchivo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nuevoArchivoActionPerformed(evt);
            }
        });
        jMenu1.add(nuevoArchivo);

        jMenuBar1.add(jMenu1);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel14, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel14, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void agregarClienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_agregarClienteActionPerformed
        boolean error = false;
        Cliente cliente;
        try {
            int idPaisActual = Integer.parseInt(tablaPaises.getModel().getValueAt(tablaPaises.getSelectedRow(), 0).toString());
            int idSucursalActual = Integer.parseInt(tablaSucursales.getModel().getValueAt(tablaSucursales.getSelectedRow(), 0).toString());
            ClientesListaSimple busqueda = paises.buscar(raiz, idPaisActual).getSucursales().buscar(idSucursalActual).getTecnicos().buscar(marcaCliente.getSelectedIndex()+1).getAsignados();
            ClientesCola busquedaC = paises.buscar(raiz, idPaisActual).getSucursales().buscar(idSucursalActual).getTecnicos().buscar(marcaCliente.getSelectedIndex()+1).getCola();
            if (!nombreCliente.getText().isEmpty() && !contactoCliente.getText().isEmpty() && !cedulaCliente.getText().isEmpty() && !cedulaCliente.getText().isEmpty() && !problemaCliente.getText().isEmpty()) {
                if (busqueda.contar() < 10) {
                    cliente = new Cliente(idPaisActual, idSucursalActual, marcaCliente.getSelectedIndex()+1, busqueda.contar()+1, nombreCliente.getText(), contactoCliente.getText(), Integer.parseInt(cedulaCliente.getText()), problemaCliente.getText(), true);
                    agregarCliente(cliente);
                    agregarClienteDatosLabel.setText("El cliente no tiene cola por delante. La entrega del equipo sera el dia: "+ cliente.getEntrega());
                } else {
                    cliente = new Cliente(idPaisActual, idSucursalActual, marcaCliente.getSelectedIndex()+1, busqueda.contar()+busquedaC.contar()+1, nombreCliente.getText(), contactoCliente.getText(), Integer.parseInt(cedulaCliente.getText()), problemaCliente.getText(), false);
                    cliente.setEntrega(1+busquedaC.contar()/10);
                    agregarClienteDatosLabel.setText("El cliente tiene cola de espera para poder ser atendido. Tiene una cola de "+busquedaC.contar()+ " persona(s). La fecha de entrega es: "+cliente.getEntrega());
                    agregarClienteCola(cliente);
                }
                errorCliente.setText("El cliente llamado "+nombreCliente.getText()+" ha sido agregado");
                nombreCliente.setText(null);
                contactoCliente.setText(null);
                cedulaCliente.setText(null);
                problemaCliente.setText(null);
            } else {
                errorCliente.setText("Campos vacios");
            }
        } catch(NumberFormatException e){
            errorCliente.setText("Hay un campo(s) que solo se admiten numeros!");
        } catch (Exception e) {
            errorCliente.setText("No se ha seleccionado una sucursal!");
        }
    }//GEN-LAST:event_agregarClienteActionPerformed

    private void agregarPaisActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_agregarPaisActionPerformed
        boolean error = false;
        try {
            for (int i = 0; i < paises.contarHojas(raiz)+paises.contarNodos(raiz); i++) {
                PaisNodoABB busqueda = paises.buscar(raiz, i+1);
                if (busqueda.getPais().equalsIgnoreCase(nombrePais.getText())) {
                    error = true;
                }
            }
            if (!nombrePais.getText().isEmpty()) {
                if (!error) {
                    agregarPais(paises.contarHojas(raiz)+paises.contarNodos(raiz)+1, nombrePais.getText());
                    jLabel10.setText("El pais "+nombrePais.getText()+" ha sido agregado");
                    nombrePais.setText("");
                } else {
                    jLabel10.setText("Campo vacio");
                }
            } else {
                jLabel10.setText("Ya existe un nombre con ese pais");
            }
        } catch (Exception e) {
            jLabel10.setText("No se han cargado los datos");
        }
    }//GEN-LAST:event_agregarPaisActionPerformed

    private void tablaPaisesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tablaPaisesMouseClicked
        int row = tablaPaises.getSelectedRow();
        nombrePaisSeleccionado.setText(tablaPaises.getModel().getValueAt(row, 1).toString());
        paisLabel1.setText(tablaPaises.getModel().getValueAt(row, 1).toString());
        nombrePaisSeleccionado1.setText(tablaPaises.getModel().getValueAt(row, 1).toString());
        actualizarTecnicos();
        actualizarInformacion();
        actualizarSucursales();
    }//GEN-LAST:event_tablaPaisesMouseClicked

    private void tablaSucursalesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tablaSucursalesMouseClicked
        int rowP = tablaPaises.getSelectedRow();
        String paisActual = tablaPaises.getModel().getValueAt(rowP, 1).toString();
        int rowS = tablaSucursales.getSelectedRow();
        String sucursalActual = tablaSucursales.getModel().getValueAt(rowS, 1).toString();
        sucursalLabel.setText(sucursalActual);
        paisSucursalLabel.setText(paisActual + " / " + sucursalActual);
        actualizarTecnicos();
        actualizarInformacion();
    }//GEN-LAST:event_tablaSucursalesMouseClicked

    private void agregarSucursalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_agregarSucursalActionPerformed
        String[] tecnicos={huaweiNombre.getText(), samsungNombre.getText(),
            lgNombre.getText(), iphoneNombre.getText(),
            nokiaNombre.getText(), motorolaNombre.getText(),
            otrosNombre.getText()};
        try {
            int idPaisActual = Integer.parseInt(tablaPaises.getModel().getValueAt(tablaPaises.getSelectedRow(), 0).toString());
            if (!nombreSucursal.getText().isEmpty() && !encargado.getText().isEmpty() && !tecnicos[0].isEmpty() && !tecnicos[1].isEmpty()
                && !tecnicos[2].isEmpty() && !tecnicos[3].isEmpty() && !tecnicos[4].isEmpty() && !tecnicos[5].isEmpty() && !tecnicos[6].isEmpty()) {

                agregarSucursal(paises.buscar(raiz, idPaisActual).getSucursales().contar()+1, nombreSucursal.getText(), encargado.getText(), tecnicos);
                errorS.setText("Agregada la sucursal llamada: "+ nombreSucursal.getText());
                nombreSucursal.setText(null);
                encargado.setText(null);
                huaweiNombre.setText(null); 
                samsungNombre.setText(null);
                lgNombre.setText(null);
                iphoneNombre.setText(null);
                nokiaNombre.setText(null);
                motorolaNombre.setText(null);
                otrosNombre.setText(null);
            } else {
                errorS.setText("Campos vacios");
            }
        } catch (Exception e) {
            errorS.setText("Pais no seleccionado");
        }
    }//GEN-LAST:event_agregarSucursalActionPerformed

    private void marcaClienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_marcaClienteActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_marcaClienteActionPerformed

    private void tablaTecnicosMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tablaTecnicosMouseClicked
        int idPaisActual = Integer.parseInt(tablaPaises.getModel().getValueAt(tablaPaises.getSelectedRow(), 0).toString());
        int idSucursalActual = Integer.parseInt(tablaSucursales.getModel().getValueAt(tablaSucursales.getSelectedRow(), 0).toString());
        int idTecnicoActual = Integer.parseInt(tablaTecnicos.getModel().getValueAt(tablaTecnicos.getSelectedRow(), 0).toString());
        tecnicoLabel.setText(paises.buscar(raiz, idPaisActual).getSucursales().buscar(idSucursalActual).getTecnicos().buscar(idTecnicoActual).getTecnico().getNombre());
        actualizarClientes();
        actualizarClientesCola();
    }//GEN-LAST:event_tablaTecnicosMouseClicked

    private void nuevoArchivoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nuevoArchivoActionPerformed
        File fichero = new File("archivo.DAT");
        fichero.delete();
        raiz = null;
        obtenerObjetos();
        actualizarTodo();
    }//GEN-LAST:event_nuevoArchivoActionPerformed

    private void cargarDatosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cargarDatosActionPerformed
        obtenerObjetos();
    }//GEN-LAST:event_cargarDatosActionPerformed

    private void eliminarPaisActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_eliminarPaisActionPerformed
        try {
            int idPaisActual = Integer.parseInt(tablaPaises.getModel().getValueAt(tablaPaises.getSelectedRow(), 0).toString());
            paises.buscar(raiz, idPaisActual).setEliminado(true);
            eliminarPaisLabel.setText("Pais eliminado");
            tablaPaises.clearSelection();
            actualizarTodo();
        } catch(Exception e) {
            eliminarPaisLabel.setText("No se ha seleccionado un pais");
        }
    }//GEN-LAST:event_eliminarPaisActionPerformed
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {        
        try {
        javax.swing.UIManager.setLookAndFeel(new WebLookAndFeel());
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
        java.util.logging.Logger.getLogger(App.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        
        java.awt.EventQueue.invokeLater(new Runnable() {
        public void run() {
        new App().setVisible(true);
        }
        });
        /*PaisNodoABB raiz = null;
        PaisesABB paises;
        raiz = new PaisNodoABB(2, "Venezuela", new SucursalListaSimple(null));
        paises = new PaisesABB(raiz);
        paises.insertar(raiz, new PaisNodoABB(3, "Colombia", new SucursalListaSimple(null)));
        paises.insertar(raiz, new PaisNodoABB(4, "Peru", new SucursalListaSimple(null)));
        paises.insertar(raiz, new PaisNodoABB(5, "Bolivia", new SucursalListaSimple(null)));
        PaisNodoABB busqueda = paises.buscar(raiz, 3);
        busqueda.getSucursales().insertaFinal(new SucursalNodoSimple(3, 0, "Sucursal 1", "Ricardo"));
        busqueda.getSucursales().insertaFinal(new SucursalNodoSimple(3, 1, "Sucursal 2", "Pepe"));
        busqueda.getSucursales().insertaFinal(new SucursalNodoSimple(3, 2, "Sucursal 3", "Jose"));
        for (int i = 0; i < busqueda.getSucursales().getNombres().length; i++) {
            System.out.println(busqueda.getSucursales().getNombres().length);
            System.out.println(busqueda.getSucursales().getNombres()[i]);
        }
        TecnicoNodoSimple tecnico = new TecnicoNodoSimple(new Tecnico(busqueda.getIdpais(), 0, 1, 1, "hola", "Tipo"));
        TecnicoListaSimple sucursal = busqueda.getSucursales().buscar(0).getTecnicos();
        System.out.println(sucursal.getNombres());
        System.out.println(busqueda.getSucursales().buscar(0).getTecnicos().getNombres()[0]);
        System.out.println(busqueda.getPais());*/

    }
    
    private void guardarObjetos() {
        try {
            FileOutputStream fileO = new FileOutputStream ("archivo.DAT");
            ObjectOutputStream output = new ObjectOutputStream (fileO);
            output.writeObject(paises);
            output.writeObject(raiz);
            output.close();
        } catch (IOException ex) {
            Logger.getLogger(App.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    private void obtenerObjetos() {
        try {
            FileInputStream fileI = new FileInputStream ("archivo.DAT");
            ObjectInputStream input = new ObjectInputStream (fileI);
            paises = (PaisesABB) input.readObject();
            raiz = (PaisNodoABB) input.readObject();
            input.close();
            System.out.println(paises.buscar(raiz, 1).getPais());
            actualizarPaises();
        } catch (IOException ex) {
            agregarPais(1, "Venezuela");
            guardarObjetos();
            obtenerObjetos();
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(App.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    private void agregarPais(int idPais, String nombre) {
        if (raiz == null) {
            raiz = new PaisNodoABB(idPais, nombre, new SucursalListaSimple(null));
            paises = new PaisesABB(raiz);
        } else {
            paises.insertar(raiz, new PaisNodoABB(idPais, nombre, new SucursalListaSimple(null)));
        }
        actualizarPaises();
        guardarObjetos();
    }
    
    private void agregarInformacion(Cliente cliente) {
        int idPaisActual = Integer.parseInt(tablaPaises.getModel().getValueAt(tablaPaises.getSelectedRow(), 0).toString());
        int idSucursalActual = Integer.parseInt(tablaSucursales.getModel().getValueAt(tablaSucursales.getSelectedRow(), 0).toString());
        InformacionListaSimple busqueda = paises.buscar(raiz, idPaisActual).getSucursales().buscar(idSucursalActual).getInformacion();
        busqueda.insertaFinal(new InformacionNodoSimple(cliente));
    }
    
    private void actualizarTodo() {
        actualizarPaises();
        actualizarSucursales();
        actualizarTecnicos();
        actualizarInformacion();
        actualizarClientes();
        actualizarClientesCola();
    }
    
    private void actualizarPaises() {
        DefaultTableModel model = (DefaultTableModel) tablaPaises.getModel();
        for (int i = model.getRowCount() - 1; i >= 0; i--) {
            model.removeRow(i);
        }
        String[] nombres = paises.getNombrePaisesEnOrden(raiz);
        String[] id = paises.getIdPaisesEnOrden(raiz);
        String[] eliminados = paises.getEliminadosPaisesEnOrden(raiz);
        
        for (int i = 0; i < paises.getNombrePaisesEnOrden(raiz).length; i++) {
            System.out.println(eliminados[i]);
            if (eliminados[i].equalsIgnoreCase("false")) {
                Object[] row = {id[i], nombres[i]};
                model.addRow(row); 
            }
        }
    }
    
    private void actualizarSucursales() {
        try {
            int row = tablaPaises.getSelectedRow();
            int idPaisActual = Integer.parseInt(tablaPaises.getModel().getValueAt(row, 0).toString());
            PaisNodoABB busqueda = paises.buscar(raiz, idPaisActual);

            DefaultTableModel model = (DefaultTableModel) tablaSucursales.getModel();
            for (int i = model.getRowCount() - 1; i >= 0; i--) {
                model.removeRow(i);
            }
            String[] nombres = busqueda.getSucursales().getNombres();
            String[] id = busqueda.getSucursales().getIds();
            String[] encargados = busqueda.getSucursales().getEncargados();
            for (int i = 0; i < busqueda.getSucursales().getNombres().length; i++) {
                Object[] rowNew = {id[i], nombres[i], encargados[i]};
                model.addRow(rowNew);
            }
        } catch(Exception e) {
            DefaultTableModel model = (DefaultTableModel) tablaSucursales.getModel();
            for (int i = model.getRowCount() - 1; i >= 0; i--) {
                model.removeRow(i);
            }
        }
    }
    
    private void actualizarTecnicos() {
        try {
            int rowP = tablaPaises.getSelectedRow();
            int idPaisActual = Integer.parseInt(tablaPaises.getModel().getValueAt(rowP, 0).toString());
            int rowS = tablaSucursales.getSelectedRow();
            int idSucursalActual = Integer.parseInt(tablaSucursales.getModel().getValueAt(rowS, 0).toString());
            SucursalNodoSimple busqueda = paises.buscar(raiz, idPaisActual).getSucursales().buscar(idSucursalActual);

            DefaultTableModel model = (DefaultTableModel) tablaTecnicos.getModel();
            for (int i = model.getRowCount() - 1; i >= 0; i--) {
                model.removeRow(i);
            }
            String[] nombres = busqueda.getTecnicos().getNombres();
            String[] id = busqueda.getTecnicos().getIds();
            String[] tipos = busqueda.getTecnicos().getTipos();
            for (int i = 0; i < nombres.length; i++) {
                Object[] rowNew = {id[i], nombres[i], tipos[i]};
                model.addRow(rowNew);
            }
        } catch(Exception e) {
            DefaultTableModel model = (DefaultTableModel) tablaTecnicos.getModel();
            for (int i = model.getRowCount() - 1; i >= 0; i--) {
                model.removeRow(i);
            }
        }
    }

    private void actualizarColaClientes() {
        try {
            int idPaisActual = Integer.parseInt(tablaPaises.getModel().getValueAt(tablaPaises.getSelectedRow(), 0).toString());
            int idSucursalActual = Integer.parseInt(tablaSucursales.getModel().getValueAt(tablaSucursales.getSelectedRow(), 0).toString());
            int idTecnicoActual = Integer.parseInt(tablaTecnicos.getModel().getValueAt(tablaTecnicos.getSelectedRow(), 0).toString());
            ClientesListaSimple busqueda = paises.buscar(raiz, idPaisActual).getSucursales().buscar(idSucursalActual).getTecnicos().buscar(idTecnicoActual).getCola();

            DefaultTableModel model = (DefaultTableModel) tablaClientes.getModel();
            for (int i = model.getRowCount() - 1; i >= 0; i--) {
                model.removeRow(i);
            }
            String[] nombres = busqueda.getNombres();
            String[] id = busqueda.getIds();
            String[] cedulas = busqueda.getCedulas();
            String[] contactos = busqueda.getContacto();
            String[] entregas = busqueda.getEntrega();
            String[] ingresos = busqueda.getIngreso();
            String[] problemas = busqueda.getProblema();
            
            for (int i = 0; i < nombres.length; i++) {
                Object[] rowNew = {id[i], nombres[i], contactos[i], cedulas[i], problemas[i], ingresos[i], entregas[i]};
                model.addRow(rowNew);
            }
        } catch(Exception e) {
            DefaultTableModel model = (DefaultTableModel) tablaClientes.getModel();
            for (int i = model.getRowCount() - 1; i >= 0; i--) {
                model.removeRow(i);
            }
        }
    }
    
    private void actualizarInformacion() {
        try {
            int idPaisActual = Integer.parseInt(tablaPaises.getModel().getValueAt(tablaPaises.getSelectedRow(), 0).toString());
            int idSucursalActual = Integer.parseInt(tablaSucursales.getModel().getValueAt(tablaSucursales.getSelectedRow(), 0).toString());
            InformacionListaSimple busqueda = paises.buscar(raiz, idPaisActual).getSucursales().buscar(idSucursalActual).getInformacion();

            DefaultTableModel model = (DefaultTableModel) tablaInfo.getModel();
            for (int i = model.getRowCount() - 1; i >= 0; i--) {
                model.removeRow(i);
            }
            String[] idTecnico = busqueda.getIdTecnicos();
            String[] nombres = busqueda.getNombres();
            String[] id = busqueda.getIds();
            String[] cedulas = busqueda.getCedulas();
            String[] contactos = busqueda.getContacto();
            String[] entregas = busqueda.getEntrega();
            String[] ingresos = busqueda.getIngreso();
            String[] problemas = busqueda.getProblema();
            boolean[] asignado = busqueda.getAsignado();
            boolean[] entregado = busqueda.getEntregado();
            
            for (int i = 0; i < nombres.length; i++) {
                Object[] rowNew = {idTecnico[i], id[i], nombres[i], contactos[i],cedulas[i], asignado[i], ingresos[i], entregas[i], entregado[i], problemas[i]};
                model.addRow(rowNew);
            }
        } catch(Exception e) {
            DefaultTableModel model = (DefaultTableModel) tablaInfo.getModel();
            for (int i = model.getRowCount() - 1; i >= 0; i--) {
                model.removeRow(i);
            }
        }
    } 
        
    private void actualizarClientes() {
        try {
            int idPaisActual = Integer.parseInt(tablaPaises.getModel().getValueAt(tablaPaises.getSelectedRow(), 0).toString());
            int idSucursalActual = Integer.parseInt(tablaSucursales.getModel().getValueAt(tablaSucursales.getSelectedRow(), 0).toString());
            int idTecnicoActual = Integer.parseInt(tablaTecnicos.getModel().getValueAt(tablaTecnicos.getSelectedRow(), 0).toString());
            ClientesListaSimple busqueda = paises.buscar(raiz, idPaisActual).getSucursales().buscar(idSucursalActual).getTecnicos().buscar(idTecnicoActual).getAsignados();

            DefaultTableModel model = (DefaultTableModel) tablaClientes.getModel();
            for (int i = model.getRowCount() - 1; i >= 0; i--) {
                model.removeRow(i);
            }
            String[] nombres = busqueda.getNombres();
            String[] id = busqueda.getIds();
            String[] cedulas = busqueda.getCedulas();
            String[] contactos = busqueda.getContacto();
            String[] entregas = busqueda.getEntrega();
            String[] ingresos = busqueda.getIngreso();
            String[] problemas = busqueda.getProblema();
            
            for (int i = 0; i < nombres.length; i++) {
                Object[] rowNew = {id[i], nombres[i], contactos[i], cedulas[i], problemas[i], ingresos[i], entregas[i]};
                model.addRow(rowNew);
            }
        } catch(Exception e) {
            DefaultTableModel model = (DefaultTableModel) tablaClientes.getModel();
            for (int i = model.getRowCount() - 1; i >= 0; i--) {
                model.removeRow(i);
            }
        }
    }
    
    private void actualizarClientesCola() {
        try {
            int idPaisActual = Integer.parseInt(tablaPaises.getModel().getValueAt(tablaPaises.getSelectedRow(), 0).toString());
            int idSucursalActual = Integer.parseInt(tablaSucursales.getModel().getValueAt(tablaSucursales.getSelectedRow(), 0).toString());
            int idTecnicoActual = Integer.parseInt(tablaTecnicos.getModel().getValueAt(tablaTecnicos.getSelectedRow(), 0).toString());
            ClientesCola busqueda = paises.buscar(raiz, idPaisActual).getSucursales().buscar(idSucursalActual).getTecnicos().buscar(idTecnicoActual).getCola();

            DefaultTableModel model = (DefaultTableModel) tablaCola.getModel();
            for (int i = model.getRowCount() - 1; i >= 0; i--) {
                model.removeRow(i);
            }
            String[] nombres = busqueda.getNombres();
            String[] id = busqueda.getIds();
            String[] cedulas = busqueda.getCedulas();
            String[] contactos = busqueda.getContacto();
            String[] entregas = busqueda.getEntrega();
            String[] ingresos = busqueda.getIngreso();
            String[] problemas = busqueda.getProblema();
            
            for (int i = 0; i < nombres.length; i++) {
                Object[] rowNew = {id[i], nombres[i], contactos[i], cedulas[i], problemas[i], ingresos[i], entregas[i]};
                model.addRow(rowNew);
            }
        } catch(Exception e) {
            DefaultTableModel model = (DefaultTableModel) tablaCola.getModel();
            for (int i = model.getRowCount() - 1; i >= 0; i--) {
                model.removeRow(i);
            }
        }
    }
    
    private void agregarSucursal(int idPaisActual, int idSucursal, String nombre, String gerente, String tecnicos[]) {
        String[] tipo={"Huawei", "Samsung", "LG", "iPhone", "Nokia", "Motorola", "Otros"};
        PaisNodoABB busqueda = paises.buscar(raiz, idPaisActual);
        busqueda.getSucursales().insertaFinal(new SucursalNodoSimple(idPaisActual, idSucursal, nombre, gerente));
        for (int i = 0; i < tecnicos.length; i++) {
            busqueda.getSucursales().buscar(idSucursal).getTecnicos().insertaFinal(new TecnicoNodoSimple(new Tecnico(idPaisActual, idSucursal, i+1, i+1, tecnicos[i], tipo[i]))); 
        }
        actualizarSucursales();
        guardarObjetos();
    }
    
    private void agregarSucursal(int idSucursal, String nombre, String gerente, String tecnicos[]) {
        int row = tablaPaises.getSelectedRow();
        int idPaisActual = Integer.parseInt(tablaPaises.getModel().getValueAt(row, 0).toString());
        String[] tipo={"Huawei", "Samsung", "LG", "iPhone", "Nokia", "Motorola", "Otros"};
        PaisNodoABB busqueda = paises.buscar(raiz, idPaisActual);
        busqueda.getSucursales().insertaFinal(new SucursalNodoSimple(idPaisActual, idSucursal, nombre, gerente));
        for (int i = 0; i < tecnicos.length; i++) {
            busqueda.getSucursales().buscar(idSucursal).getTecnicos().insertaFinal(new TecnicoNodoSimple(new Tecnico(idPaisActual, idSucursal, i+1, i+1, tecnicos[i], tipo[i]))); 
        }
        actualizarSucursales();
        guardarObjetos();
    }
    
    private void agregarClienteDirectamente(Cliente cliente) {
        ClientesListaSimple busqueda = paises.buscar(raiz, cliente.getIdPais()).getSucursales().buscar(cliente.getIdSucursal()).getTecnicos().buscar(cliente.getIdTecnico()).getAsignados();
        busqueda.insertaFinal(new ClienteNodoSimple(cliente));
        agregarInformacion(cliente);
        actualizarClientes();
        actualizarInformacion();
        guardarObjetos();
    }
    
    private void agregarCliente(Cliente cliente) {
        int idPaisActual = Integer.parseInt(tablaPaises.getModel().getValueAt(tablaPaises.getSelectedRow(), 0).toString());
        int idSucursalActual = Integer.parseInt(tablaSucursales.getModel().getValueAt(tablaSucursales.getSelectedRow(), 0).toString());
        ClientesListaSimple busqueda = paises.buscar(raiz, idPaisActual).getSucursales().buscar(idSucursalActual).getTecnicos().buscar(cliente.getIdTecnico()).getAsignados();
        busqueda.insertaFinal(new ClienteNodoSimple(cliente));
        agregarInformacion(cliente);
        actualizarClientes();
        actualizarInformacion();
        guardarObjetos();
    }
    
    private void agregarClienteCola(Cliente cliente) {
        int idPaisActual = Integer.parseInt(tablaPaises.getModel().getValueAt(tablaPaises.getSelectedRow(), 0).toString());
        int idSucursalActual = Integer.parseInt(tablaSucursales.getModel().getValueAt(tablaSucursales.getSelectedRow(), 0).toString());
        ClientesCola busqueda = paises.buscar(raiz, idPaisActual).getSucursales().buscar(idSucursalActual).getTecnicos().buscar(cliente.getIdTecnico()).getCola();
        busqueda.encolar(new ClienteNodoSimple(cliente));
        agregarInformacion(cliente);
        actualizarClientesCola();
        actualizarInformacion();
        guardarObjetos();
    }
    
    public boolean isNumeric(String s) {  
        return s.matches("[-+]?\\d*\\.?\\d+");  
    }  
   
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton agregarCliente;
    private javax.swing.JLabel agregarClienteDatosLabel;
    private javax.swing.JButton agregarPais;
    private javax.swing.JButton agregarSucursal;
    private javax.swing.JMenuItem cargarDatos;
    private javax.swing.JTextField cedulaCliente;
    private javax.swing.JTextField contactoCliente;
    private javax.swing.JButton eliminarPais;
    private javax.swing.JLabel eliminarPaisLabel;
    private javax.swing.JTextField encargado;
    private javax.swing.JLabel errorCliente;
    private javax.swing.JLabel errorS;
    private javax.swing.JLabel errorSucursal;
    private javax.swing.JTextField huaweiNombre;
    private javax.swing.JTextField iphoneNombre;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel28;
    private javax.swing.JLabel jLabel29;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel30;
    private javax.swing.JLabel jLabel33;
    private javax.swing.JLabel jLabel34;
    private javax.swing.JLabel jLabel37;
    private javax.swing.JLabel jLabel44;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel13;
    private javax.swing.JPanel jPanel14;
    private javax.swing.JPanel jPanel15;
    private javax.swing.JPanel jPanel16;
    private javax.swing.JPanel jPanel17;
    private javax.swing.JPanel jPanel18;
    private javax.swing.JPanel jPanel19;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel20;
    private javax.swing.JPanel jPanel22;
    private javax.swing.JPanel jPanel23;
    private javax.swing.JPanel jPanel24;
    private javax.swing.JPanel jPanel25;
    private javax.swing.JPanel jPanel26;
    private javax.swing.JPanel jPanel27;
    private javax.swing.JPanel jPanel28;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane15;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JScrollPane jScrollPane8;
    private javax.swing.JScrollPane jScrollPane9;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JPopupMenu.Separator jSeparator2;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTabbedPane jTabbedPane2;
    private javax.swing.JTabbedPane jTabbedPane4;
    private javax.swing.JTabbedPane jTabbedPane5;
    private javax.swing.JTable jTable3;
    private javax.swing.JTable jTable9;
    private javax.swing.JTextField lgNombre;
    private javax.swing.JList listaSucursales3;
    private javax.swing.JComboBox marcaCliente;
    private javax.swing.JTextField motorolaNombre;
    private javax.swing.JTextField nokiaNombre;
    private javax.swing.JTextField nombreCliente;
    private javax.swing.JTextField nombrePais;
    private javax.swing.JLabel nombrePaisSeleccionado;
    private javax.swing.JLabel nombrePaisSeleccionado1;
    private javax.swing.JTextField nombreSucursal;
    private javax.swing.JMenuItem nuevoArchivo;
    private javax.swing.JTextField otrosNombre;
    private javax.swing.JLabel paisLabel1;
    private javax.swing.JLabel paisSucursalLabel;
    private javax.swing.JTextArea problemaCliente;
    private javax.swing.JTextField samsungNombre;
    private javax.swing.JLabel sucursalLabel;
    private javax.swing.JTable tablaClientes;
    private javax.swing.JTable tablaCola;
    private javax.swing.JTable tablaInfo;
    private javax.swing.JTable tablaPaises;
    private javax.swing.JTable tablaSucursales;
    private javax.swing.JTable tablaTecnicos;
    private javax.swing.JLabel tecnicoLabel;
    // End of variables declaration//GEN-END:variables
}
